const mongoose = require("mongoose");

const orderSchema = new mongoose.Schema(
  {
    invoiceName: String,
    employee: String,

    financailFund: [
      {
        currency: String,
        currencyID: String,
        exchangeRate: String,
        name: String,
        id: String,
        allocatedAmount: Number,
        _id: false,
      },
    ],

    exchangeRate: Number,
    invoicesItems: [
      {
        type: { type: String, default: "product" },
        id: String,
        qr: String,
        name: String,
        category: String,
        orginalBuyingPrice: Number,
        profitRatio: Number,
        convertedBuyingPrice: Number,
        sellingPrice: Number,
        unit: String,
        tax: {
          _id: String,
          tax: Number,
          salesAccountTax: String,
          name: String,
        },
        taxValue: Number,
        stock: {
          _id: String,
          stock: { type: String },
          stockQuantity: Number,
        },
        soldQuantity: Number,
        totalWithoutTax: Number,
        total: Number,
        note: String,
        exchangeRate: Number,
        discountType: String,
        discountPercentege: Number,
        discountAmount: Number,
        discount: Number,
        showNote: Boolean,
        showDiscount: Boolean,
        buyingpriceMainCurrence: Number,
        linkAccount: String,
        _id: false,
      },
    ],
    customer: {
      id: String,
      name: String,
      phone: String,
      email: String,
      address: String,
      company: String,
      taxAdministration: String,
      taxNumber: String,
      country: String,
      city: String,
      linkAccount: String,
      _id: false,
    },
    returnCartItem: [
      {
        id: String,
        type: { type: String, default: "product" },
        qr: String,
        name: String,
        category: String,
        orginalBuyingPrice: Number,
        profitRatio: Number,
        convertedBuyingPrice: Number,
        sellingPrice: Number,
        unit: String,
        tax: {
          _id: String,
          tax: Number,
          salesAccountTax: String,
          name: String,
        },
        taxValue: Number,
        stock: {
          _id: String,
          stock: { type: String },
        },
        soldQuantity: Number,
        totalWithoutTax: Number,
        total: Number,
        note: String,
        exchangeRate: Number,
        discountType: String,
        discountPercentege: Number,
        discountAmount: Number,
        discount: Number,
        showNote: Boolean,
        showDiscount: Boolean,
        buyingpriceMainCurrence: Number,
        _id: false,
        linkAccount: String,
      },
    ],
    taxSummary: [
      {
        taxRate: Number,
        totalTaxValue: Number,
        discountTaxValue: Number,
        _id: false,
      },
    ],
    currency: {
      id: String,
      currencyCode: String,
      exchangeRate: String,
      currencyAbbr: String,
      currencyName: String,
      _id: false,
    },
    tag: [
      {
        id: String,
        name: String,
        color: String,
        _id: false,
      },
    ],
    totalInMainCurrency: Number,
    manuallInvoiceDiscount: Number,
    manuallInvoiceDiscountValue: Number,
    invoiceDiscount: Number,
    ManualInvoiceDiscountValue: Number,

    currencyExchangeRate: { type: Number, default: 1 },
    orderDate: String,
    orderNumber: String,
    SeriNumber: String,
    SiraNumber: String,
    paymentsStatus: String,
    paymentDate: String,
    paymentDescription: String,
    paymentInFundCurrency: Number,
    invoiceGrandTotal: Number,
    InvoiceDiscountType: String,
    invoiceSubTotal: Number,
    invoiceTax: Number,
    dueDate: String,
    invoiceType: { type: String, default: "sales" },
    payments: [
      {
        payment: Number,
        paymentMainCurrency: Number,
        financialFunds: String,
        financialFundsId: String,
        financialFundsCurrencyCode: String,
        exchangeRate: String,
        date: String,
        paymentID: String,
        paymentInInvoiceCurrency: Number,
        _id: false,
      },
    ],

    description: String,
    type: {
      type: String,
      enum: [
        "sales",
        "bills",
        "openBalance",
        "ecommerce",
        "cancel",
        "sales-pos",
      ],
      default: "sales",
    },

    receipts: [String],
    counter: String,
    totalRemainderMainCurrency: { type: Number, default: 0 },
    totalRemainder: { type: Number, default: 0 },

    openingBalanceId: String,
    reportsBalanceId: String,
    journalCounter: String,
    efaturaGenerated: { type: Boolean, default: false },
    ettn: { type: String, default: "" },
    efaturaStatus: { type: String, default: "" },
    sync: { type: Boolean, default: false },
    shipmentComapny: {
      id: String,
      name: String,
      Company: String,
      email: String,
      phone: String,
      address: String,
    },
    shipmentNumber: String,
    shipmentDate: String,
    companyId: {
      type: String,
      required: true,
      index: true,
    },
  },

  { timestamps: true }
);

module.exports = mongoose.model("Sales", orderSchema);
